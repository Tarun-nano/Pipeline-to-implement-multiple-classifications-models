def classpipe(pipeline, scaled_xtrain, ytrain, scaled_xtest, ytest, verbose=True):
   
    pipeline.fit(scaled_xtrain, ytrain)
    y_test_pred = pipeline.predict(scaled_xtest)
    
    acc = accuracy_score(ytest,y_test_pred)
    cohen_score = cohen_kappa_score(ytest,y_test_pred)
    
    if verbose:
        print("----------------------------------------------------------------------------------")
        print(f"Classifier algorithm: {pipeline.named_steps['regressor'].__class__.__name__}")
        print()
        print(f"Accuracy Score : {acc}")
        print(f"CohenKappa Score : {cohen_score}")
        print()
    
    return pipeline.named_steps['regressor'], acc, cohen_score
    
regressors = [
    LogisticRegression(),
    DecisionTreeClassifier(),
    RandomForestClassifier(),
    LGBMClassifier(lambda_l1=10),
    AdaBoostClassifier(),
    GradientBoostingClassifier(),
    XGBClassifier(lambda_l1=10)
    
]

for r in regressors:
    pipe = Pipeline(steps = [
        ('regressor', r)
    ])

    classpipe(pipe, scaled_xtrain, ytrain, scaled_xtest, ytest)
